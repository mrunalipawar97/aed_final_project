/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package catering.system.UI.FoodWarehouseAdminWorkArea;

import business.ApplicationSystem;
import catering.system.FoodWarehouseOrganization.Inventory;
import catering.system.FoodWarehouseOrganization.InventoryManager;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mrunalipawar
 */
public class InventoryStoreManagementJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InventoryStoreManagementJPanel
     */
    
    JPanel userProcessContainer;
    private static ApplicationSystem system;
    DefaultTableModel storeListTableModel;

    public InventoryStoreManagementJPanel() {
        initComponents();
    }
    public InventoryStoreManagementJPanel(JPanel userProcessContainer, ApplicationSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        storeListTableModel = (DefaultTableModel)storeListTable.getModel();
        showComboBoxesList();
        showDeleteList();
        viewGroceryList();
    }
    
    public void viewGroceryList() {
        if (system.getInventoryDirectory().getStoreList().size() > 0) {
            for (int i = 0; i < system.getInventoryDirectory().getStoreList().size(); i++) {
                storeListTableModel.addRow(new Object[]{
                    system.getInventoryDirectory().getStoreList().get(i).getName(),
                    system.getInventoryDirectory().getStoreList().get(i).getManagerDetails().getName(),
                    system.getInventoryDirectory().getStoreList().get(i).getLocation(),
                    system.getInventoryDirectory().getStoreList().get(i).getPhone(),
                });
            }
        }
    }

    public void showDeleteList() {
        for (int i = 0; i < system.getInventoryDirectory().getStoreList().size(); i++) {
            storeListCombobox.addItem(system.getInventoryDirectory().getStoreList().get(i).getName());
            updateStoreListCombobox.addItem(system.getInventoryDirectory().getStoreList().get(i).getName());

        }
    }

    
    public void showComboBoxesList() {
        managerListCombobox.removeAllItems();
        ArrayList<InventoryManager> managerslist = this.system.getEnterpriseDirectory().getInventoryManagerDirectory().getInventoryManagerList();
        System.out.println(managerslist+" managerslist");
         if(managerslist.size() > 0){
             for (InventoryManager im :managerslist){
                 managerListCombobox.addItem(im);
             }
        }
        else{
            System.out.println("Empty List");
        }
        /*for (int i = 0; i < system.getInventoryManagerDirectory().getInventoryManagerList().size(); i++) {
            managerListCombobox.addItem(system.getInventoryManagerDirectory().getInventoryManagerList().get(i).getName());
            updateManagerListCombobox.addItem(system.getInventoryManagerDirectory().getInventoryManagerList().get(i).getName());
        }*/
    }
    
    public void resetUpdate() {
        updateStoreListCombobox.setSelectedIndex(0);        
        updateManagerListCombobox.setSelectedIndex(0);

        updateLocationTextField.setText("");
        updatePhoneTextField.setText("");
        updateStoreNameText.setText("");
    }
    
    public InventoryManager getCurrentManager(String name) {
        for (int i = 0; i < system.getInventoryManagerDirectory().getInventoryManagerList().size(); i++) {
            if (system.getInventoryManagerDirectory().getInventoryManagerList().get(i).getName().equals(name)) {
                return system.getInventoryManagerDirectory().getInventoryManagerList().get(i);
            }
        }
        return null;
    }
    
    public Boolean validateFields(String address, String phone, String name) {
        if(phone.isEmpty() || name.isEmpty() || address.isEmpty()) {
            JOptionPane.showMessageDialog(null,"Fields cannot be empty","Error message", JOptionPane.ERROR_MESSAGE);
            return false;
        }else if(phone.length() != 10) {
            JOptionPane.showMessageDialog(null, "PhoneNumber must be of 10 digits","Error message", JOptionPane.ERROR_MESSAGE);
            return false;
        }else if(!phone.matches("^[0-9]+$")) {
            JOptionPane.showMessageDialog(null, "Phone Number must have digits only","Error message", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        storeNameJLabel = new javax.swing.JLabel();
        storeNameText = new javax.swing.JTextField();
        addStoreButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        storeListTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        selectManagerLabel = new javax.swing.JLabel();
        updateStoreListCombobox = new javax.swing.JComboBox<>();
        updateRestManagerLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        restNameLabel1 = new javax.swing.JLabel();
        updateStoreNameText = new javax.swing.JTextField();
        updateManagerListCombobox = new javax.swing.JComboBox<>();
        ManagerJLabel = new javax.swing.JLabel();
        managerListCombobox = new javax.swing.JComboBox();
        phoneJLabel = new javax.swing.JLabel();
        locationJLabel = new javax.swing.JLabel();
        locationTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        updatePhoneTextField = new javax.swing.JTextField();
        updateLocationTextField = new javax.swing.JTextField();
        title = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deleteNameLabel = new javax.swing.JLabel();
        storeListCombobox = new javax.swing.JComboBox<>();
        deleteStoreButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 180, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Item");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 120, 21));

        storeNameJLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        storeNameJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        storeNameJLabel.setText("Name");
        add(storeNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 50, 30));

        storeNameText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        storeNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeNameTextActionPerformed(evt);
            }
        });
        add(storeNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 150, 30));

        addStoreButton.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        addStoreButton.setText("Add ");
        addStoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStoreButtonActionPerformed(evt);
            }
        });
        add(addStoreButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 350, 130, 30));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("View Items");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 110, 24));

        storeListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Manager", "Location", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(storeListTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 540, 188));

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(51, 51, 51));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 133, 40));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Update Item");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 80, 120, 30));

        selectManagerLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        selectManagerLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        selectManagerLabel.setText("Select Item");
        add(selectManagerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 120, 105, 30));

        updateStoreListCombobox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        updateStoreListCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        updateStoreListCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStoreListComboboxActionPerformed(evt);
            }
        });
        add(updateStoreListCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 120, 150, 30));

        updateRestManagerLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        updateRestManagerLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        updateRestManagerLabel.setText("Manager Name");
        add(updateRestManagerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 220, 129, 30));

        updateButton.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 370, 133, 30));

        restNameLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        restNameLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        restNameLabel1.setText("Name");
        add(restNameLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 168, 73, 30));

        updateStoreNameText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        updateStoreNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStoreNameTextActionPerformed(evt);
            }
        });
        add(updateStoreNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 170, 150, 30));

        updateManagerListCombobox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        updateManagerListCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        updateManagerListCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateManagerListComboboxActionPerformed(evt);
            }
        });
        add(updateManagerListCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 220, 150, 30));

        ManagerJLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        ManagerJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ManagerJLabel.setText("Manager Name");
        add(ManagerJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 110, 30));

        managerListCombobox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        managerListCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        managerListCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerListComboboxActionPerformed(evt);
            }
        });
        add(managerListCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 190, 150, 30));

        phoneJLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        phoneJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        phoneJLabel.setText("Phone");
        add(phoneJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 250, 50, 30));

        locationJLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        locationJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        locationJLabel.setText("Location");
        add(locationJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 300, 70, 30));

        locationTextField.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        locationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationTextFieldActionPerformed(evt);
            }
        });
        add(locationTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, 150, 30));

        phoneTextField.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        add(phoneTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 250, 150, 30));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Phone");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 270, 80, 30));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Location");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 320, 60, 30));

        updatePhoneTextField.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        updatePhoneTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePhoneTextFieldActionPerformed(evt);
            }
        });
        add(updatePhoneTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 270, 150, 30));

        updateLocationTextField.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        updateLocationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateLocationTextFieldActionPerformed(evt);
            }
        });
        add(updateLocationTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 320, 150, 30));

        title.setBackground(new java.awt.Color(255, 255, 255));
        title.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Manage Inventory Store");
        add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 510, 50));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Delete Item");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 450, 110, 30));

        deleteNameLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        deleteNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        deleteNameLabel.setText("Name");
        add(deleteNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 490, 52, 30));

        storeListCombobox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        storeListCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        storeListCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeListComboboxActionPerformed(evt);
            }
        });
        add(storeListCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 490, 164, 30));

        deleteStoreButton.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        deleteStoreButton.setText("Delete");
        deleteStoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStoreButtonActionPerformed(evt);
            }
        });
        add(deleteStoreButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 540, 133, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void storeNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_storeNameTextActionPerformed

    private void addStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStoreButtonActionPerformed
        // TODO add your handling code here:
        if(managerListCombobox.getSelectedItem() == null || managerListCombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null,"Select a value from dropdown of Inventory to update","Error message", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!validateFields(locationTextField.getText(), phoneTextField.getText(), storeNameText.getText())) {
            return;
        }
        for (int i = 0; i < system.getInventoryDirectory().getStoreList().size(); i++) {
            if(system.getInventoryDirectory().getStoreList().get(i).getName() == null ? storeNameText.getText() == null : system.getInventoryDirectory().getStoreList().get(i).getName().equals(storeNameText.getText())){
                JOptionPane.showMessageDialog(null,"Inventory Already Present", "Error message" ,JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        String managerSelectedItem = (String) managerListCombobox.getSelectedItem();

        String selectedItem = (String) storeListCombobox.getSelectedItem();

        InventoryManager rm = getCurrentManager(managerSelectedItem);
        system.getInventoryDirectory().createInventoryStore(storeNameText.getText(), rm, phoneTextField.getText(), locationTextField.getText());
        System.out.println("Inventory Store Added ....");
        JOptionPane.showMessageDialog(this, "Inventory store added successfully");
        storeListCombobox.addItem(storeNameText.getText());
        updateStoreListCombobox.addItem(storeNameText.getText());

        storeListTableModel.addRow(new Object[]{
            storeNameText.getText(),
            managerSelectedItem,
            locationTextField.getText(),
            phoneTextField.getText()
        });
        storeNameText.setText("");
        locationTextField.setText("");
        phoneTextField.setText("");

        managerListCombobox.setSelectedItem(null);
    }//GEN-LAST:event_addStoreButtonActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        FoodWareHouseAdminMainJPanel dm= new FoodWareHouseAdminMainJPanel(userProcessContainer, system);
        userProcessContainer.add("FoodWareHouseAdminMainJPanel",dm);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        String managerSelectedItem = (String) updateManagerListCombobox.getSelectedItem();
        InventoryManager rm = getCurrentManager(managerSelectedItem);
        boolean flag = false;

        String selectedItem = (String) updateStoreListCombobox.getSelectedItem();
        storeListCombobox.getSelectedIndex();
        if(updateStoreListCombobox.getSelectedItem() == null || updateStoreListCombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null,"Select a value from dropdown of Inventory to update","Error message", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!validateFields(updateLocationTextField.getText(), updatePhoneTextField.getText(), updateStoreNameText.getText())) {
            return;
        }
        if(updateManagerListCombobox.getSelectedItem() == null || updateManagerListCombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null,"Select a value from manager dropdown of Inventory to update","Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (flag == false) {
            //            Boolean isDelete = ecosystem.getRestaurantDirectory().deleteRestaurant(selectedItem);
            for (int i = 0; i < system.getInventoryDirectory().getStoreList().size(); i++) {
                if (system.getInventoryDirectory().getStoreList().get(i).getName().equals(selectedItem)) {
                    system.getInventoryDirectory().getStoreList().get(i).setName(updateStoreNameText.getText());
                    system.getInventoryDirectory().getStoreList().get(i).setLocation(updateLocationTextField.getText());
                    system.getInventoryDirectory().getStoreList().get(i).setPhone(updatePhoneTextField.getText());
                    system.getInventoryDirectory().getStoreList().get(i).setManagerDetails(rm);
                }
            }
        }

        for (int i = 0; i < storeListTable.getRowCount(); i++) {
            if (((String) storeListTable.getValueAt(i, 0)).equals(selectedItem)) {
                storeListCombobox.addItem(updateStoreNameText.getText());
                storeListTableModel.addRow(new Object[]{
                    updateStoreNameText.getText(),
                    managerSelectedItem,
                    updateLocationTextField.getText(),
                    updatePhoneTextField.getText()
                });
                storeListTableModel.removeRow(i);
                storeListCombobox.removeItemAt(i + 1);
            }//end of if block
        }
        System.out.println("Inventory Store Updated ....");
        resetUpdate();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void updateStoreNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStoreNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateStoreNameTextActionPerformed

    private void updateManagerListComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateManagerListComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateManagerListComboboxActionPerformed

    private void managerListComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerListComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_managerListComboboxActionPerformed

    private void locationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTextFieldActionPerformed

    private void updatePhoneTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePhoneTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updatePhoneTextFieldActionPerformed

    private void updateLocationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateLocationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateLocationTextFieldActionPerformed

    private void storeListComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeListComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_storeListComboboxActionPerformed

    private void deleteStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStoreButtonActionPerformed
        // TODO add your handling code here:
        boolean flag = false;

        String selectedItem = (String) storeListCombobox.getSelectedItem();
        storeListCombobox.getSelectedIndex();
        if(storeListCombobox.getSelectedItem() == null || storeListCombobox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null,"Select a value from dropdown of Inventory to delete","Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (flag == false) {
            Boolean isDelete = system.getInventoryDirectory().deleteInvetory(selectedItem);
            for (int i = 0; i < storeListTable.getRowCount(); i++) {
                if (((String) storeListTable.getValueAt(i, 0)).equals(selectedItem)) {
                    storeListTableModel.removeRow(i);
                    storeListCombobox.removeItemAt(i + 1);
                    updateStoreListCombobox.removeItemAt(i + 1);
                }//end of if block
            }
            if (isDelete) {
                System.out.println("Inventory deleted ....");
                JOptionPane.showMessageDialog(this, "Inventory deleted successfully");
            }
        }
        storeListCombobox.setSelectedIndex(0);
    }//GEN-LAST:event_deleteStoreButtonActionPerformed

    private void updateStoreListComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStoreListComboboxActionPerformed
        // TODO add your handling code here:
        if (updateStoreListCombobox.getSelectedItem() != "None") {
            String selectedItem = (String) updateStoreListCombobox.getSelectedItem();
            for (int i = 0; i < system.getInventoryDirectory().getStoreList().size(); i++) {
                if (system.getInventoryDirectory().getStoreList().get(i).getName().equalsIgnoreCase(selectedItem)) {
                    updateStoreNameText.setText(system.getInventoryDirectory().getStoreList().get(i).getName());
                    updateLocationTextField.setText(system.getInventoryDirectory().getStoreList().get(i).getLocation());
                    updatePhoneTextField.setText(system.getInventoryDirectory().getStoreList().get(i).getPhone());
                    updateManagerListCombobox.setSelectedItem(system.getInventoryDirectory().getStoreList().get(i).getManagerDetails());
                    break;
                }
            }
        }else{
            updateStoreNameText.setText("");
            updateLocationTextField.setText("");
            updatePhoneTextField.setText("");
            updateManagerListCombobox.setSelectedItem(null);
        }
    }//GEN-LAST:event_updateStoreListComboboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ManagerJLabel;
    private javax.swing.JButton addStoreButton;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel deleteNameLabel;
    private javax.swing.JButton deleteStoreButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel locationJLabel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JComboBox managerListCombobox;
    private javax.swing.JLabel phoneJLabel;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JLabel restNameLabel1;
    private javax.swing.JLabel selectManagerLabel;
    private javax.swing.JComboBox<String> storeListCombobox;
    private javax.swing.JTable storeListTable;
    private javax.swing.JLabel storeNameJLabel;
    private javax.swing.JTextField storeNameText;
    private javax.swing.JLabel title;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField updateLocationTextField;
    private javax.swing.JComboBox<String> updateManagerListCombobox;
    private javax.swing.JTextField updatePhoneTextField;
    private javax.swing.JLabel updateRestManagerLabel;
    private javax.swing.JComboBox<String> updateStoreListCombobox;
    private javax.swing.JTextField updateStoreNameText;
    // End of variables declaration//GEN-END:variables
}
